import _ from "lodash";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import Error from "next/error";
import { ReactElement } from "react";
import { MoonLoader } from "react-spinners";
import HeroIntro from "../../components/Hero/HeroIntro";
import Layout from "../../components/Layout";
import { Hero, HeroMain } from "../../interfaces/heroes";
import stratsApiService from "../../services/stratsApi.service";
import { getDetaiHero, getImgStratsDota } from "../../share";
import { NextPageWithLayout } from "../_app";
import FeaturedGuides from "../../components/Hero/FeaturedGuides";
import HeroItems from "../../components/Hero/HeroItems";
import HeroRampage from "../../components/Hero/HeroRampage";
import HeroDetailAndLore from "../../components/Hero/HeroDetailAndLore";
import {
  ChartPickRate,
  HeroCharWinrate,
  MatchUps,
  OptionsRank,
  RolesStatus,
} from "../../components";
import { LeaderBoards } from "../../components/Hero";
import { useAppSelector, useAppDispatch } from "../../store/hook";
import {
  setHeaderImg,
  setSubHeaderMain,
} from "../../store/Slices/globalDataSlice";

type Props = {
  heroOverView: {
    heroMain: HeroMain;
  } | null;
  statusCode: number;
};

const HeroesPage: NextPageWithLayout<Props> = (props) => {
  const dispatch = useAppDispatch();
  const router = useRouter();
  const heroes = useAppSelector((state) => state.globalData.heroes);
  const [loading, setLoading] = useState<boolean>(false);
  const [hero, setHero] = useState<Hero | null>(null);
  const [mounted, setMounted] = useState(false);
  const [queryData, setQueryData] = useState(router.query);
  const [mainData, setMainData] = useState<HeroMain>();

  useEffect(() => {
    if (mounted || !props.heroOverView) return;
    setMounted(true);
    const id = props.heroOverView.heroMain.constants.hero.id;
    const heroo = getDetaiHero(heroes, id);
    if (heroo) {
      setHero(heroo);
      setMainData(props.heroOverView.heroMain);
      dispatch(setSubHeaderMain(<HeroIntro hero={heroo} />));
      dispatch(
        setHeaderImg(getImgStratsDota(`/heroes/${heroo.shortName}_vert.png`))
      );
    }
  }, [heroes, dispatch, props, mounted]);

  useEffect(() => {
    let isApiSubcribed = true;
    try {
      if (!router.isReady) return;
      const query = router.query;
      if (JSON.stringify(query) !== JSON.stringify(queryData)) {
        const { id, rankBracketHeroTimeDetail } = query;
        const brackets = [];
        if (typeof rankBracketHeroTimeDetail === "string") {
          const idx = rankBracketHeroTimeDetail.indexOf("_");
          brackets.push(rankBracketHeroTimeDetail.slice(0, idx));
          brackets.push(
            rankBracketHeroTimeDetail.slice(
              idx + 1,
              rankBracketHeroTimeDetail.length
            )
          );
        } else {
          brackets.push("IMMORTAL");
        }
        setLoading(true);
        stratsApiService
          .getHeroInfo(Number(id), brackets)
          .then((res) => {
            if (isApiSubcribed) {
              const data = res.data.data as HeroMain;
              setMainData(data);
              setLoading(false);
              setQueryData(query);
            }
          })
          .catch((err) => {
            isApiSubcribed = false;
            setQueryData(query);
          });
      }
    } catch (error) {
      isApiSubcribed = false;
    }
    return () => {
      isApiSubcribed = false;
    };
  }, [router, queryData]);

  if (props.statusCode !== 200) {
    return <Error statusCode={props.statusCode} />;
  }

  if (!props.heroOverView) {
    return <Error statusCode={500} />;
  }

  return (
    <>
      <Head>
        <title>{hero?.displayName}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section>
        <div className="container m-auto mt-5">
          <OptionsRank />
          {loading && (
            <div className="py-10 flex justify-center items-center">
              <MoonLoader color="#fff" size={40} />
            </div>
          )}
          {hero && mainData && !loading && (
            <>
              <div className="my-4 flex flex-wrap -ml-2 -mr-2">
                <div className="w-full xl:w-1/3 p-2 h-[200px]">
                  <HeroCharWinrate
                    winGameVersions={mainData.heroStats.winGameVersion}
                    hero={hero}
                  />
                </div>
                <div className="w-full xl:w-1/3 p-2 h-[200px]">
                  <ChartPickRate
                    winGameVersions={mainData.heroStats.winGameVersion}
                    hero={hero}
                  />
                </div>
                <div className="w-full xl:w-1/3 p-2 h-[200px]">
                  <MatchUps
                    heroVsHeroMatchup={mainData.heroStats.heroVsHeroMatchup}
                    hero={hero}
                  />
                </div>
              </div>
              <div className="my-4">
                <RolesStatus stats={mainData.heroStats} />
              </div>
              <div className="my-4">
                <HeroItems stats={mainData.heroStats} />
              </div>
              <div className="my-4 flex flex-wrap -ml-2 -mr-2">
                <div className="xl:w-4/6 xl:m-0 mb-4 w-full px-2">
                  <FeaturedGuides
                    hero={hero}
                    guide={mainData.heroStats.guide[0]}
                  />
                </div>
                <div className="xl:w-2/6 w-full px-2 ">
                  <LeaderBoards leaderboard={mainData.leaderboard} />
                </div>
              </div>
              <div className="my-4">
                <HeroRampage rampages={mainData.heroStats.rampages} />
              </div>
              <div className="my-4">
                <HeroDetailAndLore hero={hero} />
              </div>
            </>
          )}
        </div>
      </section>
    </>
  );
};

HeroesPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

export const getServerSideProps: GetServerSideProps<Props> = async (
  context
) => {
  try {
    const id = Number(context.params?.id);
    const rankBracketHeroTimeDetail = context.query
      .rankBracketHeroTimeDetail as string;
    const brackets = [];
    if (rankBracketHeroTimeDetail) {
      const idx = rankBracketHeroTimeDetail.indexOf("_");
      brackets.push(rankBracketHeroTimeDetail.slice(0, idx));
      brackets.push(
        rankBracketHeroTimeDetail.slice(
          idx + 1,
          rankBracketHeroTimeDetail.length
        )
      );
    } else {
      brackets.push("IMMORTAL");
    }
    const res = await stratsApiService.getHeroInfo(id, brackets);
    if (res.status !== 200) {
      return {
        props: {
          heroOverView: null,
          statusCode: res.status,
        },
      };
    }
    // const res2 = await stratsApiService.getHeroHeader(id);
    // if (res2.status !== 200) {
    //   return {
    //     props: {
    //       heroOverView: null,
    //       statusCode: res.status,
    //     },
    //   };
    // }
    const data = res.data.data;
    // const data2 = res2.data.data;
    return {
      props: {
        heroOverView: {
          heroMain: data,
        },
        statusCode: 200,
      },
    };
  } catch (error) {
    return {
      props: {
        heroOverView: null,
        statusCode: 500,
      },
    };
  }
};

export default HeroesPage;
