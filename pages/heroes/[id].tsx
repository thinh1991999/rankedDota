import _ from "lodash";
import { GetServerSideProps, GetStaticPaths, GetStaticProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { ParsedUrlQuery } from "querystring";
import React, { useEffect } from "react";
import { ReactElement } from "react";
import HeroContainer from "../../components/Hero/HeroContainer";
import HeroIntro from "../../components/Hero/HeroIntro";
import Layout from "../../components/Layout";
import { Hero, Rampage, Role } from "../../interfaces/heroes";
import stratsApiService from "../../services/stratsApi.service";
import { usePageLoading } from "../../share";
import { NextPageWithLayout } from "../_app";

type Props = {
  heroOverView: {
    hero: Hero;
    rampages: Rampage[];
  };
};

const HeroesPage: NextPageWithLayout<Props> = (props) => {
  const {
    heroOverView: { hero, rampages },
  } = props;
  const router = useRouter();
  const { isPageLoading } = usePageLoading();
  useEffect(() => {}, [router.query?.id]);
  return (
    <>
      <Head>
        <title>{router.query?.id}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section>
        <HeroIntro hero={hero} />
      </section>
      {/* {isPageLoading ? (
        <p className="text-white">loading............</p>
      ) : (
        <HeroContainer data={heroStats} />
      )} */}
    </>
  );
};

HeroesPage.getLayout = function getLayout(page: ReactElement) {
  return <Layout>{page}</Layout>;
};

// export const getStaticPaths: GetStaticPaths = async () => {
//   const res = await stratsApiService.getHeroesPaths();
//   const idArr: { id: string }[] = res.data.data.constants.heroes;
//   return {
//     paths: idArr.map((item) => {
//       return {
//         params: {
//           id: String(item.id),
//         },
//       };
//     }),
//     fallback: "blocking", // can also be true or 'blocking'
//   };
// };

// interface Params extends ParsedUrlQuery {
//   id: string;
// }
// export const getStaticProps: GetStaticProps<Props, Params> = async (
//   context
// ) => {
//   const params = context.params!;
//   interface Respon {
//     hero: HeroDetailSort;
//     abilities: Ability[];
//   }
//   const res = await stratsApiService.getDetailHero(params.id);
//   const dataRespon: Respon = res.data.data.constants;

//   const { hero, abilities } = dataRespon;
//   const abilitiesFull: Ability[] = [];
//   // const rolesFull: Role[] = [];
//   _.forEach(hero.abilities, (ability) => {
//     const idx = _.findIndex(abilities, (abi) => {
//       return abi.id === ability.abilityId;
//     });
//     abilitiesFull.push(abilities[idx]);
//   });
//   const heroDetail: HeroDetail = {
//     ...hero,
//     abilities: abilitiesFull,
//   };
//   // _.forEach(hero.roles, (role) => {
//   //   const idx = _.findIndex(roles, (rolee) => {
//   //     return rolee.roleId === role.roleId;
//   //   });
//   //   abilitiesFull.push(abilities[idx]);
//   // });

//   return {
//     props: { heroDetail: heroDetail },
//   };
// };

export const getServerSideProps: GetServerSideProps<Props> = async (
  context
) => {
  const res = await stratsApiService.getDetailHero({
    heroId: 102,
    // bracketIds: ["DIVINE", "IMMORTAL"],
    bracketBasicIds: "DIVINE_IMMORTAL",
    // topPlayersBracketIds: ["DIVINE", "IMMORTAL"],
  });
  const {
    constants: { hero },
    heroStats: { rampages },
  }: { constants: { hero: Hero }; heroStats: { rampages: Rampage[] } } =
    res.data.data;
  return {
    props: {
      heroOverView: {
        hero,
        rampages,
      },
    },
  };
};

export default HeroesPage;
